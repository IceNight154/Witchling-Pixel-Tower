plugins {
    id 'com.android.application'
}

android {
    namespace 'com.shatteredpixel.shatteredpixeldungeon-mod-2.android'
    compileSdk 34

    defaultConfig {
        applicationId 'com.shatteredpixel.shatteredpixeldungeon-mod-2.android'
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        debug {
            applicationIdSuffix ".indev"
            versionNameSuffix "-INDEV"
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packaging {
        jniLibs { useLegacyPackaging true }
        resources {
            excludes += ["META-INF/AL2.0", "META-INF/LGPL2.1"]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

// --- Put your existing dependencies here (example for libGDX) ---
// If your root build.gradle defines `ext.gdxVersion`, this will work.
// Otherwise, replace `$gdxVersion` with the actual version string (e.g., "1.12.1").
dependencies {
    implementation project(':core')

    // libGDX Android backend + natives (adjust if your project differs)
    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
}

// Optional: task to extract .so from native jars (keep if you need it)
tasks.register("copyAndroidNatives") {
    doFirst {
        configurations["implementation"].files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-arm64-v8a.jar"))   outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-x86.jar"))         outputDir = file("libs/x86")
            if (jar.name.endsWith("natives-x86_64.jar"))      outputDir = file("libs/x86_64")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}
